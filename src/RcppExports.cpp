// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// kro_prod
arma::mat kro_prod(arma::mat A, arma::mat B);
RcppExport SEXP _tnsrcomp_kro_prod(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(kro_prod(A, B));
    return rcpp_result_gen;
END_RCPP
}
// krao_prod
arma::mat krao_prod(arma::mat A, arma::mat B);
RcppExport SEXP _tnsrcomp_krao_prod(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(krao_prod(A, B));
    return rcpp_result_gen;
END_RCPP
}
// unfold_ten
List unfold_ten(arma::cube tens);
RcppExport SEXP _tnsrcomp_unfold_ten(SEXP tensSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type tens(tensSEXP);
    rcpp_result_gen = Rcpp::wrap(unfold_ten(tens));
    return rcpp_result_gen;
END_RCPP
}
// fold_ten
arma::cube fold_ten(arma::mat A, arma::vec dim, const int mode);
RcppExport SEXP _tnsrcomp_fold_ten(SEXP ASEXP, SEXP dimSEXP, SEXP modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::vec >::type dim(dimSEXP);
    Rcpp::traits::input_parameter< const int >::type mode(modeSEXP);
    rcpp_result_gen = Rcpp::wrap(fold_ten(A, dim, mode));
    return rcpp_result_gen;
END_RCPP
}
// f_norm
float f_norm(arma::cube tens, arma::cube approx);
RcppExport SEXP _tnsrcomp_f_norm(SEXP tensSEXP, SEXP approxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type tens(tensSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type approx(approxSEXP);
    rcpp_result_gen = Rcpp::wrap(f_norm(tens, approx));
    return rcpp_result_gen;
END_RCPP
}
// tens_mat
arma::cube tens_mat(arma::cube tens, arma::mat X, int mode);
RcppExport SEXP _tnsrcomp_tens_mat(SEXP tensSEXP, SEXP XSEXP, SEXP modeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type tens(tensSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type mode(modeSEXP);
    rcpp_result_gen = Rcpp::wrap(tens_mat(tens, X, mode));
    return rcpp_result_gen;
END_RCPP
}
// core_ten
arma::cube core_ten(List core_mat);
RcppExport SEXP _tnsrcomp_core_ten(SEXP core_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type core_mat(core_matSEXP);
    rcpp_result_gen = Rcpp::wrap(core_ten(core_mat));
    return rcpp_result_gen;
END_RCPP
}
// find_core
arma::cube find_core(arma::cube tens, List mats);
RcppExport SEXP _tnsrcomp_find_core(SEXP tensSEXP, SEXP matsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type tens(tensSEXP);
    Rcpp::traits::input_parameter< List >::type mats(matsSEXP);
    rcpp_result_gen = Rcpp::wrap(find_core(tens, mats));
    return rcpp_result_gen;
END_RCPP
}
// vec_tensor
arma::cube vec_tensor(arma::mat A, arma::mat B, arma::mat C);
RcppExport SEXP _tnsrcomp_vec_tensor(SEXP ASEXP, SEXP BSEXP, SEXP CSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type C(CSEXP);
    rcpp_result_gen = Rcpp::wrap(vec_tensor(A, B, C));
    return rcpp_result_gen;
END_RCPP
}
// als_up
List als_up(List X_list, List tens_list, int mode, bool nng);
RcppExport SEXP _tnsrcomp_als_up(SEXP X_listSEXP, SEXP tens_listSEXP, SEXP modeSEXP, SEXP nngSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type X_list(X_listSEXP);
    Rcpp::traits::input_parameter< List >::type tens_list(tens_listSEXP);
    Rcpp::traits::input_parameter< int >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< bool >::type nng(nngSEXP);
    rcpp_result_gen = Rcpp::wrap(als_up(X_list, tens_list, mode, nng));
    return rcpp_result_gen;
END_RCPP
}
// wy_bls
List wy_bls(List X_modes, List tens_list, int mode, float tau, float beta);
RcppExport SEXP _tnsrcomp_wy_bls(SEXP X_modesSEXP, SEXP tens_listSEXP, SEXP modeSEXP, SEXP tauSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type X_modes(X_modesSEXP);
    Rcpp::traits::input_parameter< List >::type tens_list(tens_listSEXP);
    Rcpp::traits::input_parameter< int >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< float >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< float >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(wy_bls(X_modes, tens_list, mode, tau, beta));
    return rcpp_result_gen;
END_RCPP
}
// bontf
List bontf(arma::cube X, List X_n, List tnsr_list, int rank, int iter, double tol, bool nng);
RcppExport SEXP _tnsrcomp_bontf(SEXP XSEXP, SEXP X_nSEXP, SEXP tnsr_listSEXP, SEXP rankSEXP, SEXP iterSEXP, SEXP tolSEXP, SEXP nngSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type X(XSEXP);
    Rcpp::traits::input_parameter< List >::type X_n(X_nSEXP);
    Rcpp::traits::input_parameter< List >::type tnsr_list(tnsr_listSEXP);
    Rcpp::traits::input_parameter< int >::type rank(rankSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type nng(nngSEXP);
    rcpp_result_gen = Rcpp::wrap(bontf(X, X_n, tnsr_list, rank, iter, tol, nng));
    return rcpp_result_gen;
END_RCPP
}
// uo_decomp
List uo_decomp(arma::cube X, List X_n, List tnsr_list, int rank, int iter, double tol, bool nng);
RcppExport SEXP _tnsrcomp_uo_decomp(SEXP XSEXP, SEXP X_nSEXP, SEXP tnsr_listSEXP, SEXP rankSEXP, SEXP iterSEXP, SEXP tolSEXP, SEXP nngSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type X(XSEXP);
    Rcpp::traits::input_parameter< List >::type X_n(X_nSEXP);
    Rcpp::traits::input_parameter< List >::type tnsr_list(tnsr_listSEXP);
    Rcpp::traits::input_parameter< int >::type rank(rankSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type nng(nngSEXP);
    rcpp_result_gen = Rcpp::wrap(uo_decomp(X, X_n, tnsr_list, rank, iter, tol, nng));
    return rcpp_result_gen;
END_RCPP
}
// ntd
List ntd(arma::cube X, List X_n, List tnsr_list, int rank, int iter, double tol);
RcppExport SEXP _tnsrcomp_ntd(SEXP XSEXP, SEXP X_nSEXP, SEXP tnsr_listSEXP, SEXP rankSEXP, SEXP iterSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type X(XSEXP);
    Rcpp::traits::input_parameter< List >::type X_n(X_nSEXP);
    Rcpp::traits::input_parameter< List >::type tnsr_list(tnsr_listSEXP);
    Rcpp::traits::input_parameter< int >::type rank(rankSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(ntd(X, X_n, tnsr_list, rank, iter, tol));
    return rcpp_result_gen;
END_RCPP
}
// cp_als
List cp_als(arma::cube tens, List modes, int rank, int iter, double thres);
RcppExport SEXP _tnsrcomp_cp_als(SEXP tensSEXP, SEXP modesSEXP, SEXP rankSEXP, SEXP iterSEXP, SEXP thresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type tens(tensSEXP);
    Rcpp::traits::input_parameter< List >::type modes(modesSEXP);
    Rcpp::traits::input_parameter< int >::type rank(rankSEXP);
    Rcpp::traits::input_parameter< int >::type iter(iterSEXP);
    Rcpp::traits::input_parameter< double >::type thres(thresSEXP);
    rcpp_result_gen = Rcpp::wrap(cp_als(tens, modes, rank, iter, thres));
    return rcpp_result_gen;
END_RCPP
}
// gramat
arma::mat gramat(arma::mat layer);
RcppExport SEXP _tnsrcomp_gramat(SEXP layerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type layer(layerSEXP);
    rcpp_result_gen = Rcpp::wrap(gramat(layer));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_hello_world
arma::mat rcpparma_hello_world();
RcppExport SEXP _tnsrcomp_rcpparma_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpparma_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_outerproduct
arma::mat rcpparma_outerproduct(const arma::colvec& x);
RcppExport SEXP _tnsrcomp_rcpparma_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_innerproduct
double rcpparma_innerproduct(const arma::colvec& x);
RcppExport SEXP _tnsrcomp_rcpparma_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_bothproducts
Rcpp::List rcpparma_bothproducts(const arma::colvec& x);
RcppExport SEXP _tnsrcomp_rcpparma_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}
// get_fiber
arma::vec get_fiber(int R, arma::cube& B_out, arma::mat& Cim);
RcppExport SEXP _tnsrcomp_get_fiber(SEXP RSEXP, SEXP B_outSEXP, SEXP CimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type B_out(B_outSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Cim(CimSEXP);
    rcpp_result_gen = Rcpp::wrap(get_fiber(R, B_out, Cim));
    return rcpp_result_gen;
END_RCPP
}
// get_fiber_cum
Rcpp::List get_fiber_cum(int R, arma::cube& B_out, arma::mat& Cim, arma::vec ai, arma::vec am);
RcppExport SEXP _tnsrcomp_get_fiber_cum(SEXP RSEXP, SEXP B_outSEXP, SEXP CimSEXP, SEXP aiSEXP, SEXP amSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type B_out(B_outSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Cim(CimSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ai(aiSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type am(amSEXP);
    rcpp_result_gen = Rcpp::wrap(get_fiber_cum(R, B_out, Cim, ai, am));
    return rcpp_result_gen;
END_RCPP
}
// ts_dot_v
arma::mat ts_dot_v(arma::cube& X, arma::vec v);
RcppExport SEXP _tnsrcomp_ts_dot_v(SEXP XSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(ts_dot_v(X, v));
    return rcpp_result_gen;
END_RCPP
}
// true_Sigma
arma::mat true_Sigma(arma::mat& Sigma_W, arma::mat& Sigma_Z, int i, int j);
RcppExport SEXP _tnsrcomp_true_Sigma(SEXP Sigma_WSEXP, SEXP Sigma_ZSEXP, SEXP iSEXP, SEXP jSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Sigma_W(Sigma_WSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Sigma_Z(Sigma_ZSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    rcpp_result_gen = Rcpp::wrap(true_Sigma(Sigma_W, Sigma_Z, i, j));
    return rcpp_result_gen;
END_RCPP
}
// true_weight
arma::rowvec true_weight(arma::mat& Sigma_W, arma::mat& Sigma_Z, int i, int j);
RcppExport SEXP _tnsrcomp_true_weight(SEXP Sigma_WSEXP, SEXP Sigma_ZSEXP, SEXP iSEXP, SEXP jSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Sigma_W(Sigma_WSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Sigma_Z(Sigma_ZSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    rcpp_result_gen = Rcpp::wrap(true_weight(Sigma_W, Sigma_Z, i, j));
    return rcpp_result_gen;
END_RCPP
}
// inv_weight
arma::rowvec inv_weight(arma::mat& Sigma);
RcppExport SEXP _tnsrcomp_inv_weight(SEXP SigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Sigma(SigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(inv_weight(Sigma));
    return rcpp_result_gen;
END_RCPP
}
// weighted_cov_true
arma::mat weighted_cov_true(arma::cube& X, arma::mat& Sigma_W, arma::mat& Sigma_Z);
RcppExport SEXP _tnsrcomp_weighted_cov_true(SEXP XSEXP, SEXP Sigma_WSEXP, SEXP Sigma_ZSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Sigma_W(Sigma_WSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type Sigma_Z(Sigma_ZSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_cov_true(X, Sigma_W, Sigma_Z));
    return rcpp_result_gen;
END_RCPP
}
// weighted_cov_est
arma::mat weighted_cov_est(arma::cube& XX, arma::mat& mean_XX_L, arma::mat& est_Sigma_Z);
RcppExport SEXP _tnsrcomp_weighted_cov_est(SEXP XXSEXP, SEXP mean_XX_LSEXP, SEXP est_Sigma_ZSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube& >::type XX(XXSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type mean_XX_L(mean_XX_LSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type est_Sigma_Z(est_Sigma_ZSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_cov_est(XX, mean_XX_L, est_Sigma_Z));
    return rcpp_result_gen;
END_RCPP
}
// ind2subC
arma::vec ind2subC(int ind, int L1, int L2);
RcppExport SEXP _tnsrcomp_ind2subC(SEXP indSEXP, SEXP L1SEXP, SEXP L2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type ind(indSEXP);
    Rcpp::traits::input_parameter< int >::type L1(L1SEXP);
    Rcpp::traits::input_parameter< int >::type L2(L2SEXP);
    rcpp_result_gen = Rcpp::wrap(ind2subC(ind, L1, L2));
    return rcpp_result_gen;
END_RCPP
}
// get_tube
arma::rowvec get_tube(arma::cube X, int i, int j);
RcppExport SEXP _tnsrcomp_get_tube(SEXP XSEXP, SEXP iSEXP, SEXP jSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    rcpp_result_gen = Rcpp::wrap(get_tube(X, i, j));
    return rcpp_result_gen;
END_RCPP
}
// CimCMat
arma::mat CimCMat(arma::mat& Mat, int L1, int L2, int i, int m);
RcppExport SEXP _tnsrcomp_CimCMat(SEXP MatSEXP, SEXP L1SEXP, SEXP L2SEXP, SEXP iSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Mat(MatSEXP);
    Rcpp::traits::input_parameter< int >::type L1(L1SEXP);
    Rcpp::traits::input_parameter< int >::type L2(L2SEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(CimCMat(Mat, L1, L2, i, m));
    return rcpp_result_gen;
END_RCPP
}
// CimCX
arma::mat CimCX(arma::cube X, int L2, int i, int m);
RcppExport SEXP _tnsrcomp_CimCX(SEXP XSEXP, SEXP L2SEXP, SEXP iSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type L2(L2SEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(CimCX(X, L2, i, m));
    return rcpp_result_gen;
END_RCPP
}
// CimCX_cov
arma::mat CimCX_cov(arma::cube X, int L2, int i, int m);
RcppExport SEXP _tnsrcomp_CimCX_cov(SEXP XSEXP, SEXP L2SEXP, SEXP iSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type L2(L2SEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(CimCX_cov(X, L2, i, m));
    return rcpp_result_gen;
END_RCPP
}
// CimC
arma::mat CimC(arma::mat X, arma::mat Y, int L2, int i, int m);
RcppExport SEXP _tnsrcomp_CimC(SEXP XSEXP, SEXP YSEXP, SEXP L2SEXP, SEXP iSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type L2(L2SEXP);
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(CimC(X, Y, L2, i, m));
    return rcpp_result_gen;
END_RCPP
}
// build_D
Rcpp::List build_D(arma::mat X, arma::mat Y, arma::mat A, arma::mat B, arma::mat BtB);
RcppExport SEXP _tnsrcomp_build_D(SEXP XSEXP, SEXP YSEXP, SEXP ASEXP, SEXP BSEXP, SEXP BtBSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type BtB(BtBSEXP);
    rcpp_result_gen = Rcpp::wrap(build_D(X, Y, A, B, BtB));
    return rcpp_result_gen;
END_RCPP
}
// GjnCX
arma::mat GjnCX(arma::cube X, int L1, int j, int n);
RcppExport SEXP _tnsrcomp_GjnCX(SEXP XSEXP, SEXP L1SEXP, SEXP jSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type L1(L1SEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(GjnCX(X, L1, j, n));
    return rcpp_result_gen;
END_RCPP
}
// GjnCMat
arma::mat GjnCMat(arma::mat& Mat, int L1, int L2, int j, int n);
RcppExport SEXP _tnsrcomp_GjnCMat(SEXP MatSEXP, SEXP L1SEXP, SEXP L2SEXP, SEXP jSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Mat(MatSEXP);
    Rcpp::traits::input_parameter< int >::type L1(L1SEXP);
    Rcpp::traits::input_parameter< int >::type L2(L2SEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(GjnCMat(Mat, L1, L2, j, n));
    return rcpp_result_gen;
END_RCPP
}
// GjnCX_cov
arma::mat GjnCX_cov(arma::cube X, int L1, int j, int n);
RcppExport SEXP _tnsrcomp_GjnCX_cov(SEXP XSEXP, SEXP L1SEXP, SEXP jSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type L1(L1SEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(GjnCX_cov(X, L1, j, n));
    return rcpp_result_gen;
END_RCPP
}
// GjnC
arma::mat GjnC(arma::mat X, arma::mat Y, int L1, int j, int n);
RcppExport SEXP _tnsrcomp_GjnC(SEXP XSEXP, SEXP YSEXP, SEXP L1SEXP, SEXP jSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type L1(L1SEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(GjnC(X, Y, L1, j, n));
    return rcpp_result_gen;
END_RCPP
}
// build_G
arma::cube build_G(arma::mat X, arma::mat Y, arma::mat A_new, arma::mat B, arma::mat AtA);
RcppExport SEXP _tnsrcomp_build_G(SEXP XSEXP, SEXP YSEXP, SEXP A_newSEXP, SEXP BSEXP, SEXP AtASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type A_new(A_newSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type AtA(AtASEXP);
    rcpp_result_gen = Rcpp::wrap(build_G(X, Y, A_new, B, AtA));
    return rcpp_result_gen;
END_RCPP
}
// symmetric_decompC_test
Rcpp::List symmetric_decompC_test(arma::mat X, arma::mat Y, int R, double tol, int MAX_ITER);
RcppExport SEXP _tnsrcomp_symmetric_decompC_test(SEXP XSEXP, SEXP YSEXP, SEXP RSEXP, SEXP tolSEXP, SEXP MAX_ITERSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< int >::type R(RSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type MAX_ITER(MAX_ITERSEXP);
    rcpp_result_gen = Rcpp::wrap(symmetric_decompC_test(X, Y, R, tol, MAX_ITER));
    return rcpp_result_gen;
END_RCPP
}
// zero_non_zero_summary
Rcpp::List zero_non_zero_summary(arma::mat A0, arma::mat B0, arma::mat A, arma::mat B);
RcppExport SEXP _tnsrcomp_zero_non_zero_summary(SEXP A0SEXP, SEXP B0SEXP, SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A0(A0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B0(B0SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::mat >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(zero_non_zero_summary(A0, B0, A, B));
    return rcpp_result_gen;
END_RCPP
}
// sim_single_block
arma::cube sim_single_block(int L, int M, double rho, double alpha);
RcppExport SEXP _tnsrcomp_sim_single_block(SEXP LSEXP, SEXP MSEXP, SEXP rhoSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_single_block(L, M, rho, alpha));
    return rcpp_result_gen;
END_RCPP
}
// symmetric_decompXC
Rcpp::List symmetric_decompXC(arma::cube X, int R, int L1, int L2, double tol, int MAX_ITER, int type);
RcppExport SEXP _tnsrcomp_symmetric_decompXC(SEXP XSEXP, SEXP RSEXP, SEXP L1SEXP, SEXP L2SEXP, SEXP tolSEXP, SEXP MAX_ITERSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type R(RSEXP);
    Rcpp::traits::input_parameter< int >::type L1(L1SEXP);
    Rcpp::traits::input_parameter< int >::type L2(L2SEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type MAX_ITER(MAX_ITERSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(symmetric_decompXC(X, R, L1, L2, tol, MAX_ITER, type));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_tnsrcomp_kro_prod", (DL_FUNC) &_tnsrcomp_kro_prod, 2},
    {"_tnsrcomp_krao_prod", (DL_FUNC) &_tnsrcomp_krao_prod, 2},
    {"_tnsrcomp_unfold_ten", (DL_FUNC) &_tnsrcomp_unfold_ten, 1},
    {"_tnsrcomp_fold_ten", (DL_FUNC) &_tnsrcomp_fold_ten, 3},
    {"_tnsrcomp_f_norm", (DL_FUNC) &_tnsrcomp_f_norm, 2},
    {"_tnsrcomp_tens_mat", (DL_FUNC) &_tnsrcomp_tens_mat, 3},
    {"_tnsrcomp_core_ten", (DL_FUNC) &_tnsrcomp_core_ten, 1},
    {"_tnsrcomp_find_core", (DL_FUNC) &_tnsrcomp_find_core, 2},
    {"_tnsrcomp_vec_tensor", (DL_FUNC) &_tnsrcomp_vec_tensor, 3},
    {"_tnsrcomp_als_up", (DL_FUNC) &_tnsrcomp_als_up, 4},
    {"_tnsrcomp_wy_bls", (DL_FUNC) &_tnsrcomp_wy_bls, 5},
    {"_tnsrcomp_bontf", (DL_FUNC) &_tnsrcomp_bontf, 7},
    {"_tnsrcomp_uo_decomp", (DL_FUNC) &_tnsrcomp_uo_decomp, 7},
    {"_tnsrcomp_ntd", (DL_FUNC) &_tnsrcomp_ntd, 6},
    {"_tnsrcomp_cp_als", (DL_FUNC) &_tnsrcomp_cp_als, 5},
    {"_tnsrcomp_gramat", (DL_FUNC) &_tnsrcomp_gramat, 1},
    {"_tnsrcomp_rcpparma_hello_world", (DL_FUNC) &_tnsrcomp_rcpparma_hello_world, 0},
    {"_tnsrcomp_rcpparma_outerproduct", (DL_FUNC) &_tnsrcomp_rcpparma_outerproduct, 1},
    {"_tnsrcomp_rcpparma_innerproduct", (DL_FUNC) &_tnsrcomp_rcpparma_innerproduct, 1},
    {"_tnsrcomp_rcpparma_bothproducts", (DL_FUNC) &_tnsrcomp_rcpparma_bothproducts, 1},
    {"_tnsrcomp_get_fiber", (DL_FUNC) &_tnsrcomp_get_fiber, 3},
    {"_tnsrcomp_get_fiber_cum", (DL_FUNC) &_tnsrcomp_get_fiber_cum, 5},
    {"_tnsrcomp_ts_dot_v", (DL_FUNC) &_tnsrcomp_ts_dot_v, 2},
    {"_tnsrcomp_true_Sigma", (DL_FUNC) &_tnsrcomp_true_Sigma, 4},
    {"_tnsrcomp_true_weight", (DL_FUNC) &_tnsrcomp_true_weight, 4},
    {"_tnsrcomp_inv_weight", (DL_FUNC) &_tnsrcomp_inv_weight, 1},
    {"_tnsrcomp_weighted_cov_true", (DL_FUNC) &_tnsrcomp_weighted_cov_true, 3},
    {"_tnsrcomp_weighted_cov_est", (DL_FUNC) &_tnsrcomp_weighted_cov_est, 3},
    {"_tnsrcomp_ind2subC", (DL_FUNC) &_tnsrcomp_ind2subC, 3},
    {"_tnsrcomp_get_tube", (DL_FUNC) &_tnsrcomp_get_tube, 3},
    {"_tnsrcomp_CimCMat", (DL_FUNC) &_tnsrcomp_CimCMat, 5},
    {"_tnsrcomp_CimCX", (DL_FUNC) &_tnsrcomp_CimCX, 4},
    {"_tnsrcomp_CimCX_cov", (DL_FUNC) &_tnsrcomp_CimCX_cov, 4},
    {"_tnsrcomp_CimC", (DL_FUNC) &_tnsrcomp_CimC, 5},
    {"_tnsrcomp_build_D", (DL_FUNC) &_tnsrcomp_build_D, 5},
    {"_tnsrcomp_GjnCX", (DL_FUNC) &_tnsrcomp_GjnCX, 4},
    {"_tnsrcomp_GjnCMat", (DL_FUNC) &_tnsrcomp_GjnCMat, 5},
    {"_tnsrcomp_GjnCX_cov", (DL_FUNC) &_tnsrcomp_GjnCX_cov, 4},
    {"_tnsrcomp_GjnC", (DL_FUNC) &_tnsrcomp_GjnC, 5},
    {"_tnsrcomp_build_G", (DL_FUNC) &_tnsrcomp_build_G, 5},
    {"_tnsrcomp_symmetric_decompC_test", (DL_FUNC) &_tnsrcomp_symmetric_decompC_test, 5},
    {"_tnsrcomp_zero_non_zero_summary", (DL_FUNC) &_tnsrcomp_zero_non_zero_summary, 4},
    {"_tnsrcomp_sim_single_block", (DL_FUNC) &_tnsrcomp_sim_single_block, 4},
    {"_tnsrcomp_symmetric_decompXC", (DL_FUNC) &_tnsrcomp_symmetric_decompXC, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_tnsrcomp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
